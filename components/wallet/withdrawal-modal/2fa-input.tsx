"use client";

/* -------------------------------------------------------------------------- */
/*                             External Dependency                            */
/* -------------------------------------------------------------------------- */

import type React from "react";
import { ChevronLeft } from "lucide-react";
import { Button, Text } from "pakt-ui";
import { Controller, type SubmitHandler, useForm } from "react-hook-form";
import type * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

/* -------------------------------------------------------------------------- */
/*                             Internal Dependency                            */
/* -------------------------------------------------------------------------- */

import { InputErrorMessage, OtpInput, Spinner } from "@/components/common";
import { otpSchema } from "@/lib/validations";

type OtpFormValues = z.infer<typeof otpSchema>;

export const TwoFAInput = ({
	isLoading,
	type,
	onComplete,
	close,
}: {
	isLoading: boolean;
	type?: string;
	onComplete: (otp: string) => void;
	close: () => void;
}): React.JSX.Element => {
	const {
		handleSubmit,
		formState: { errors },
		control,
	} = useForm<OtpFormValues>({
		resolver: zodResolver(otpSchema),
	});

	const onSubmit: SubmitHandler<OtpFormValues> = async ({ otp }) => {
		onComplete(otp);
	};

	return (
		<div className="flex items-center px-4">
			<div className="flex w-full flex-col items-center rounded-2xl border p-6 text-center">
				<div className="flex w-full flex-col gap-4">
					<div className="flex flex-row justify-between">
						<ChevronLeft size={24} onClick={close} className="cursor-pointer" />
						{/* eslint-disable-next-line react/jsx-pascal-case */}
						<Text.h3 size="xs">{type === "email" ? "Email OTP" : "Authenticator App"}</Text.h3>
						<span />
					</div>
					<Text.p size="base">
						Enter the 6 digit code{" "}
						{type === "email" ? `Sent to your email` : "generated by your Authenticator app"}
					</Text.p>
				</div>

				<form className="flex w-full flex-col gap-2" onSubmit={handleSubmit(onSubmit)}>
					<div className="relative mx-auto my-4 flex flex-col">
						<Controller
							name="otp"
							control={control}
							render={({ field: { onChange, value } }) => (
								<OtpInput value={value} onChange={onChange} numInputs={6} />
							)}
						/>
						<div className="my-2 flex justify-center text-center">
							<InputErrorMessage message={errors.otp?.message} />
						</div>
					</div>
					<div className="flex">
						<Button
							type="submit"
							className="w-full justify-end self-end justify-self-end"
							disabled={isLoading}
							fullWidth
						>
							{isLoading ? <Spinner /> : "Withdraw"}
						</Button>
					</div>
				</form>
			</div>
		</div>
	);
};
